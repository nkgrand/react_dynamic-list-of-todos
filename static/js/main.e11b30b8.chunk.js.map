{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["SelectOption","TodoList","state","searchTitle","selectedTodos","all","randomVisibleTodos","selectedUserId","visibleTodo","todos","props","filterBySearch","filter","todo","todoTitle","title","toLowerCase","textSearch","includes","active","completed","sort","Math","random","todoOnList","this","userSelected","className","size","placeholder","value","onChange","event","setState","target","Object","values","map","item","type","onClick","cn","htmlFor","id","checked","readOnly","userId","React","Component","request","url","fetch","then","response","ok","json","Error","status","statusText","CurrentUser","user","loadUser","prevProps","a","clearUser","name","email","phone","App","todoError","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e11b30b8.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport cn from 'classnames';\nimport { Input } from 'antd';\nimport { Todo } from '../types/Todo';\n\nenum SelectOption {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n\ntype Props = {\n  todos: Todo[],\n  selectedUserId: number,\n  userSelected: (userId: number) => void,\n};\n\ntype State = {\n  searchTitle: string,\n  selectedTodos: string,\n  randomVisibleTodos: boolean,\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state = {\n    searchTitle: '',\n    selectedTodos: SelectOption.all,\n    randomVisibleTodos: false,\n\n  };\n\n  selectedUserId = () => { };\n\n  visibleTodo = () => {\n    const { todos } = this.props;\n    const { searchTitle, selectedTodos, randomVisibleTodos } = this.state;\n\n    let filterBySearch = todos.filter(todo => {\n      const todoTitle = todo.title.toLowerCase();\n      const textSearch = searchTitle.toLowerCase();\n\n      return todoTitle.includes(textSearch);\n    });\n\n    switch (selectedTodos) {\n      case SelectOption.active:\n        filterBySearch = filterBySearch.filter(todo => !todo.completed);\n        break;\n\n      case SelectOption.completed:\n        filterBySearch = filterBySearch.filter(todo => todo.completed);\n        break;\n\n      default:\n        break;\n    }\n\n    if (randomVisibleTodos) {\n      filterBySearch.sort(() => 0.5 - Math.random());\n    }\n\n    return filterBySearch;\n  };\n\n  render() {\n    const todoOnList = this.visibleTodo();\n    const { userSelected, selectedUserId } = this.props;\n    const { searchTitle, selectedTodos, randomVisibleTodos } = this.state;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <Input\n          size=\"large\"\n          placeholder=\"Search for todo by title\"\n          className=\"TodoList__search\"\n          value={searchTitle}\n          onChange={(event) => {\n            this.setState({\n              searchTitle: event.target.value,\n            });\n          }}\n        />\n        <select\n          className=\"TodoList__search\"\n          value={selectedTodos}\n          onChange={(event) => {\n            this.setState({\n              selectedTodos: event.target.value,\n            });\n          }}\n        >\n          {Object.values(SelectOption).map(item => (\n            <option value={item} key={item}>{item}</option>\n          ))}\n        </select>\n        <br />\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => {\n            this.setState(state => ({\n              randomVisibleTodos: !state.randomVisibleTodos,\n            }));\n          }}\n        >\n          {randomVisibleTodos ? 'Order' : 'Shuffle'}\n        </button>\n        <p className=\"text\">\n          List sorted in\n          {' '}\n          <b>{`${randomVisibleTodos ? 'SHUFFLE' : 'ORDER'}`}</b>\n          {' '}\n          mode\n        </p>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todoOnList.map(todo => (\n              <li\n                key={todo.title}\n                className={cn('TodoList__item',\n                  { 'TodoList__item--checked': todo.completed },\n                  { 'TodoList__item--unchecked': !todo.completed })}\n              >\n                <label htmlFor={`todo${todo.id}`}>\n                  <input\n                    type=\"checkbox\"\n                    id={`todo${todo.id}`}\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={cn(\n                    'TodoList__user-button',\n                    'button',\n                    { 'TodoList__user-button--selected': todo.userId === selectedUserId },\n                  )}\n                  type=\"button\"\n                  onClick={() => userSelected(todo.userId)}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url: string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => {\n      if (!response.ok) {\n        return new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const getTodos = () => {\n  return request('/todos');\n};\n\nexport const getUsers = (userId: number) => {\n  return request(`/users/${userId}`);\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { User } from '../types/User';\nimport { getUsers } from '../../api/api';\n\ntype State = {\n  user: User | null,\n};\n\ntype Props = {\n  selectedUserId: number,\n  clearUser: () => void,\n  userSelected: (userId: number) => void,\n};\n\nexport class CurrentUser extends React.Component<Props, {}> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.selectedUserId !== this.props.selectedUserId) {\n      this.loadUser();\n    }\n  }\n\n  async loadUser() {\n    try {\n      const user = await getUsers(this.props.selectedUserId);\n\n      this.setState({ user });\n    } catch (error) {\n      this.props.clearUser();\n    }\n  }\n\n  render() {\n    const { user } = this.state;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>{`Selected user: #${user?.id}`}</span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n        <p className=\"CurrentUser__email\">{user?.email}</p>\n        <p className=\"CurrentUser__phone\">{user?.phone}</p>\n        <button\n          type=\"button\"\n          className=\"button CurrentUser__clear\"\n          onClick={() => this.props.clearUser()}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nimport './App.scss';\nimport './styles/general.scss';\n\ninterface State {\n  selectedUserId: number;\n  todos: [],\n  todoError: boolean,\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n    todoError: false,\n  };\n\n  async componentDidMount() {\n    try {\n      const todos = await getTodos();\n\n      this.setState({ todos });\n    } catch (error) {\n      this.setState({ todoError: true });\n    }\n  }\n\n  userSelected = (userId: number) => {\n    if (this.state.selectedUserId !== userId) {\n      this.setState({ selectedUserId: userId });\n    }\n  };\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const { selectedUserId, todos, todoError } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {todoError ? (\n            <p>Cannot load data from server</p>\n          ) : (\n            <TodoList\n              todos={todos}\n              userSelected={this.userSelected}\n              selectedUserId={selectedUserId}\n            />\n          )}\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userSelected={this.userSelected}\n                selectedUserId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}